h1. Stone: Dead-Simple Persistence

h1. &#x2192; 'stone'


h2. What

For small applications, a database can be overkill for storing your data in a consistent and
organized manner. Therefore, Stone was built to provide plug-and-play data persistence for 
any application or framework. It is fast, and it is easy... it is good.

h2. Installing

<pre>sudo gem install stone</pre>

h2. Getting Up and Running

h3. Rails

* Create a new file in <code>config/initializers</code> called <code>stone.rb</code>

* Add the following code to your new file:
<pre syntax="ruby">
  require 'stone'
  
  Stone.start(Dir.pwd, Dir.glob(File.join(Dir.pwd,"app/models/*")))
</pre>

* Create some models! We'll use an Author as an example:
<pre syntax="none">
  stone-gen model:rails Author name:string
</pre>

h3. Merb

* Add the following code to your <code>init.rb</code> file:
<pre syntax="ruby">
  require 'stone'
  
  Stone.start(Dir.pwd, Dir.glob(File.join(Dir.pwd,"app/models/*")))
</pre>

* Create some models! We'll use an Author as an example:
<pre syntax="none">
  stone-gen model:merb Author name:string
</pre>

h3. Everywhere Else

Stone was designed to provide easy data storage management for <strong>any</strong>
app, not just web ones.

* Wherever you load your app, add the following:
<pre syntax="ruby">
  require 'stone'
  
  # replace my/path/to/models/ with wherever your models/resources may be
  Stone.start(Dir.pwd, Dir.glob(File.join(Dir.pwd,"my/path/to/models/*")))
</pre>

* Create some models! We'll use an Author as an example:
<pre syntax="ruby">
  class Author
    include Stone::Resource
    
    field :name
    
    has_many :books
  end
</pre>

That's it! Remember, there are no databases to install with Stone. Instead, 
your data gets persisted to files within <code>myapp/datastore/</code>.

h2. Usage

h3. Get, Post, Put, and Delete

* Getting
<pre syntax="ruby">
  Author.get(some_id)             # gets Author with some_id
  Author[some_id]                 # same as get()
  
  # brings back first author whose name contains "Nick"
  Author.first("name.include?('Nick')")
  
  # brings back all authors whose email contains "gmail.com", and who 
  # were created before some_date_time
  Author.all("email.include?('gmail.com') && created_at < some_date_time")
</pre>

* Posting
<pre syntax="ruby">
  author = Author.new
  author.name = "Nick DeMonner"
  author.save                     # calls Author.post after validations
</pre>

* Putting
<pre syntax="ruby">
  author = Author[some_id]        # gets Author with id of some_id
  author.name                     # => "Nick DeMonner"
  
  author.name = "Bob Bobberson"   # changes name
  author.save                     # calls Author.put after validations
</pre>

* Deleting
<pre syntax="ruby">
  Author.delete(some_id)          # deletes Author at some_id
</pre>

h3. A Word About Finding Stuff

You'll note that Stone uses a string containing ruby expressions to find
your data. Any method works here, just be careful when inserting values.

* This...
<pre syntax="ruby">
  Author.first("name == #{name}")
</pre>
...won't work.

* Instead, use this...
<pre syntax="ruby">
  Author.first("name == '#{name}'")
</pre>
... and your luck will change.

h2. License

This code is free to use under the terms of the MIT license. 

h2. Contributing

PLEASE. Stone is extremely immature at this point, and so "stable" is
the watchword for the moment.

* You can grab the source using Git:
<pre syntax="none">
  git clone git://github.com/ndemonner/stone.git
</pre>

The code is pretty well specced out, so make sure you don't break anything
by running <code>rake ok</code> every once in a while.

Please add specs for any new functionality you might add, and hit me up to
commit. =D

h2. Contact

Comments are welcome. Join me in the IRC channel #stone on freenode.